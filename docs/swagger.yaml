definitions:
  errorstratment.ResError:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
  errorstratment.ResOk:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Project deleted successfully
        type: string
    type: object
  projetos.ReqAtualizarProjetoData:
    properties:
      descricao_projeto:
        example: Criacao de sistema e-commerce
        type: string
      equipe_id:
        example: 1
        type: integer
      nome_projeto:
        example: Casas Bahias
        type: string
    type: object
  projetos.ReqProjeto:
    properties:
      descricao_projeto:
        example: Descricao
        type: string
      equipe_id:
        example: 2
        type: integer
      nome_projeto:
        example: Nome
        type: string
      prazo_entrega:
        example: 2
        type: integer
    type: object
  projetos.ReqProjetos:
    properties:
      data_conclusao:
        example: ""
        type: string
      data_criacao:
        example: "2022-07-25"
        type: string
      descricao_projeto:
        example: Descricao
        type: string
      equipe_id:
        example: 2
        type: integer
      id_projeto:
        example: 58
        type: integer
      nome_equipe:
        example: Cariri Inovação
        type: string
      nome_projeto:
        example: Nome
        type: string
      prazo_entrega:
        example: "2022-07-25"
        type: string
      status:
        example: Concluido
        type: string
    type: object
  projetos.ReqStatusProjeto:
    properties:
      data_conclusao:
        example: ""
        type: string
      data_criacao:
        example: "2022-07-25"
        type: string
      descricao_projeto:
        type: string
      equipe_id:
        type: integer
      id_projeto:
        type: integer
      nome_projeto:
        type: string
      prazo_entrega:
        example: "2022-07-25"
        type: string
      status:
        type: string
    type: object
  projetos.ReqTasksProjeto:
    properties:
      data_conclusao:
        type: string
      data_criacao:
        type: string
      descricao_task:
        type: string
      id_projeto:
        type: integer
      id_task:
        type: integer
      nome_equipe:
        type: string
      nome_pessoa:
        type: string
      nome_projeto:
        type: string
      pessoa_id:
        type: integer
      prazo_entrega:
        type: string
      prioridade:
        type: integer
      projeto_id:
        type: integer
      status:
        type: string
    type: object
  projetos.ReqUpdateStatusProjeto:
    properties:
      status:
        example: Em Andamento
        type: string
    type: object
info:
  contact:
    email: caiosousafernandesferreira@hotmail.com
    name: Caio Sousa
    url: http://www.swagger.io/support
  license:
    name: Mozilla Public License 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
paths:
  /projetos:
    get:
      consumes:
      - application/json
      description: Get list all project
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/projetos.ReqProjetos'
            type: array
        "404":
          description: error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Get All Projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: POST a new project. For the request to be met, the "nome_projeto",
        "equipe_id", "descricao_projeto" are required. The status already goes with
        a predefined value "A Fazer". the "prazo_entrega" is the number of days that
        the delivery time will be
      parameters:
      - description: NewProject
        in: body
        name: NewProject
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/projetos.ReqProjeto'
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/errorstratment.ResError'
            type: array
        "401":
          description: Unauthorized
          schema:
            items:
              $ref: '#/definitions/errorstratment.ResError'
            type: array
      security:
      - bearerAuth: []
      summary: POST a new Project
      tags:
      - Projects
  /projetos/{id}:
    delete:
      consumes:
      - application/json
      description: DELETE a specific project. For the request to be met, the "id_projeto"
        are required
      parameters:
      - description: Projeto ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/errorstratment.ResOk'
        "401":
          description: Not Authorized
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            items:
              $ref: '#/definitions/errorstratment.ResError'
            type: array
      security:
      - bearerAuth: []
      summary: Delete a specific Project
      tags:
      - Projects
    get:
      consumes:
      - application/json
      description: GET a project with a specific ID
      parameters:
      - description: Projeto ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/projetos.ReqProjetos'
            type: array
        "400":
          description: Project does not exist
          schema:
            items:
              type: string
            type: array
        "404":
          description: not authorized
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Get Project with specific ID
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: PUT a specific project. For the request to be met, the "nome_projeto"
        and "equipe_id" and "descricao_projeto" are required
      parameters:
      - description: Projeto ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project
        in: body
        name: Project
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projetos.ReqAtualizarProjetoData'
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/errorstratment.ResError'
            type: array
        "401":
          description: Unauthorized
          schema:
            items:
              $ref: '#/definitions/errorstratment.ResError'
            type: array
      security:
      - bearerAuth: []
      summary: PUT Project with ID
      tags:
      - Projects
  /projetos/{id}/status:
    put:
      consumes:
      - application/json
      description: PUT Status of a specific project. For the request to be met, the
        "status" are required
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Status-Project
        in: body
        name: Status-Project
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projetos.ReqUpdateStatusProjeto'
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/errorstratment.ResError'
            type: array
        "401":
          description: Unauthorized
          schema:
            items:
              $ref: '#/definitions/errorstratment.ResError'
            type: array
      security:
      - bearerAuth: []
      summary: PUT Status of a Project
      tags:
      - Projects
  /projetos/{id}/tasks:
    get:
      consumes:
      - application/json
      description: GET all tasks of a project with ID_Projeto specific
      parameters:
      - description: Projeto ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/projetos.ReqTasksProjeto'
            type: array
        "401":
          description: not authorized
          schema:
            items:
              type: string
            type: array
        "404":
          description: Project does not exist
          schema:
            items:
              type: string
            type: array
      security:
      - bearerAuth: []
      summary: Get Tasks of Project with Param ID
      tags:
      - Projects
  /projetos/status/{status}:
    get:
      consumes:
      - application/json
      description: GET all registered projects that have the status passed as a parameter
      parameters:
      - description: Status
        enum:
        - A Fazer
        - Em Andamento
        - Em Teste
        - Concluido
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/projetos.ReqStatusProjeto'
            type: array
        "404":
          description: error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Get Status of Projects with a specific status with Param Status
      tags:
      - Projects
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
